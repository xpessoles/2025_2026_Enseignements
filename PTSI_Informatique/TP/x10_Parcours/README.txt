Bonjour vous proc√©dez comment pour d√©tecter un cycle dans un graphe √† partir des parcours en profondeur/largeur? En regardant si un des voisins du sommet courant dans le parcours a d√©j√† √©t√© marqu√©? 


Pierre Le Scornet (Vannes)
2:37 PM
En sachant s'il est encore ouvert


Antoine Domenech
2:37 PM
DFS r√©cursif. Si un sommet voit un voisin ouvert non encore ferme, il y a un cycle (et on peut m√™me le r√©cup√©rer via l'arbre induit).

Si le graphe est non orient√© on ajoute la condition que le voisin en question n'est pas le sommet do√π l'on vient. 


Nathaniel Carr√©
2:39 PM
c'est pas le plus efficace, mais g√©n√©ralement, ce que je choisis c'est :

dans un graphe non orient√©, v√©rifier si 
‚à£
 
‚à£
‚àí
 
<
‚à£
 
‚à£
‚à£S‚à£‚àím<‚à£A‚à£, o√π 
 
m est le nombre de composantes connexes ;
dans un graphe orient√©, v√©rifier s'il existe une ar√™te 
(
 
,
 
)
(s,t) telle que 
 
 
 
 
(
 
)
<
 
 
 
 
(
 
)
post(s)<post(t), o√π 
 
 
 
 
post donne le num√©ro dans l'ordre d'un parcours en profondeur postfixe

arnaud
2:40 PM
et si on ne s'adresse pas √† des MP2I ?  :sweat_smile: 

un sommet ouvert c'est bien un sommet marqu√© qui poss√®de un voisin non marqu√© ?


np
2:47 PM

Il faut par contre bien faire attention dans un graphe non orient√© √† traiter diff√©remment le sommet d'o√π tu viens. Et le cas non orient√© pas besoin de distinguer ouvert et ferm√©. 


Nathaniel Carr√©
2:48 PM

j'ai pas test√©, mais je pense que quelque chose comme √ßa doit marcher :

def sans_cycle_orient√©(G):
    n = len(G)
    marque = [0] * n
    def DFS(s):
        if marque[s] == 0:
            marque[s] = 1
            for t in G[s]:
                if not DFS(t):
                    return False
            marque[s] = 2
        return marque[s] == 2
    for s in range(n):
        if marque[s] == 0 and not DFS(s):
            return False
    return True
ici, marque[s] vaut 0 si non ouvert, 1 si ouvert non ferm√© et 2 si ferm√©


np
2:52 PM

Pour un graphe orient√© uniquement ? 


arnaud
2:56 PM

Ce que j'ai dit au dessus √ßa ne fonctionne que pour un graphe non orient√© ?

Pour pouvoir dire que deux chemins diff√©rents qui m√®nent √† un m√™me sommet donnent l'existence d'un cycle.


np
2:58 PM

Qu'est-ce que tu appelles "marqu√©" ?

2:58 PM
Tel quel, pour moi, ce que tu as dit ci-dessus ne fonctionne dans aucun des deux cas.


arnaud
2:59 PM

tu marques un sommet lorsqu'il est visit√© par le parcours. Je parle d'un parcours en profondeur. 


np
2:59 PM

Pour le cas orient√© il faut retomber sur un somment encore dans la pile de r√©cursion (ouvert mais non ferm√©, ce que j'appelle actif). Pour le cas non orient√©, il faut distinguer le parent du sommet explor√©, qui lorsqu'il existe est toujours un voisin marqu√©. 


np
2:59 PM

√Ä quel moment ?

3:00 PM
Il y a plusieurs mani√®res de faire et il faut √™tre relativement pr√©cis pour ce genre de probl√©matiques.


arnaud
3:00 PM
La premi√®re fois que tu le visites


np
3:00 PM
Bon, alors qu'est-ce que tu appelles "visiter" :slightly_smiling_face:.


arnaud
3:00 PM
quand tu le d√©piles


np
3:00 PM
Je suis peut-√™tre p√©nible mais tout ceci est assez d√©licat en fait.


arnaud
3:03 PM

lorsqu'un sommet est d√©pil√©: s'il n'est pas marqu√© on le marque et on empile tous ses voisins, ce que j'appelle "visiter" (sinon on ne fait rien et on d√©pile un autre sommet). 


np
3:04 PM
Tu es d'accord que pour un graphe non orient√©, √† part si c'est le tout premier sommet √† partir duquel tu lances le parcours, il y aura toujours un sommet marqu√© dans ses voisins : celui √† partir duquel il a √©t√© d√©couvert ? 


arnaud
3:05 PM

Oui son pr√©d√©cesseur?


np
3:06 PM
Donc il te faut un moyen de tester ce cas.


np
3:08 PM

Et pour un graphe orient√©, tu peux tr√®s bien retomber sur un sommet d√©j√† marqu√© sans cycles. Consid√®re par exemple le graphe 
1
‚Üí
0
1‚Üí0, 
2
‚Üí
0
2‚Üí0 dans lequel ton parcours commence par le sommet 
0
0 puis le sommet 
1
1 puis le sommet 
2
2. 


arnaud
3:09 PM
oui pour les graphes orient√©s mon raisonnement est faux. Mais je ne comprends pas pourquoi il est faux pour les graphes non orient√©s?


np
3:10 PM
Si tu prends le graphe 
0
‚àí
1
0‚àí1 et que tu fais un parcours √† partir de 
0
0, tu l'empiles, tu le d√©piles, le marques et ajoutes 
1
1 dans la pile. Quand tu traites 
1
1, tu le d√©pile, tu le marques et tu trouves le voisin 
0
0 marqu√© donc tu indiques qu'il y a un cycle, alors qu'il n'y en a pas. 


arnaud
3:11 PM
Ah oui tu es p√©nible  :sweat_smile: 


np
3:15 PM

Le code de @Nathaniel Carr√© s'adapte simplement au cas non orient√© :

def sans_cycle_orient√©(G):
    n = len(G)
    marque = [0] * n
    def DFS(s, p):
        if marque[s] == 0:
            marque[s] = 1
            for t in G[s]:
                if not DFS(t, s):
                    return False
            marque[s] = 2
        return s == p || marque[s] == 2
    for s in range(n):
        if marque[s] == 0 and not DFS(s, -1):
            return False
    return True

Florian Hatat
3:15 PM
En oraux blancs, j'ai plant√© un nombre incroyable d'√©l√®ves avec √ßa ("il existe une suite d'ar√™tes d'un sommet vers lui m√™me donc c'est un cycle").


arnaud
3:19 PM

Bon mais si la suite a au moins deux ar√™tes cons√©cutives distinctes c'est ok non ? 


np
3:21 PM
Si c'est universel oui si c'est existentiel non.


arnaud
3:21 PM

en fait j'aurais bien aim√© ne pas utiliser une fonction r√©cursive


np
3:21 PM
Alors tu peux empiler les couples (sommet, parent).

3:22 PM
Ou avoir un tableau parent √† c√¥t√©.

3:22 PM
Mais pourquoi ne pas vouloir le faire en r√©cursif ? Le parcours en profondeur est fondamentalement r√©cursif.


arnaud
3:25 PM

parce qu'avec la r√©cursivit√© on ne ma√Ætrise pas bien le nombre de sous-appels r√©cursifs. 

Mais je le garde sous le coude.

Merci des explications je n'avais pas bien saisi les difficult√©s de la recherche de cycle.


Nathaniel Carr√©
3:43 PM

je ne vois pas en quoi on ma√Ætrise mieux le nombre de passages dans une boucle while


np
3:45 PM
Je pense qu'il fait r√©f√©rence au probl√®me de d√©bordement de la pile d'appels r√©cursifs.


Axel Rogue
4:19 PM
Salut,
J'ai une question √† propos de l'accueil des nouveaux √©l√®ves de sup (PTSI dans mon cas, mais √ßa ne change pas grande chose).

Est-ce que certains d'entre vous donnent √† faire une sorte de cahier de vacances pour ceux qui veulent se pr√©parer un peu en Juillet-Aout ?
Soit sous forme d'un cahier "classique", soit sous forme d'un parcours √† faire en ligne (je pense par exemple √† https://www.france-ioi.org/algo/chapters.php).

Dans ma pr√©pa jusqu'ici, on avait ajout√© une partie "Informatique" au cahier de calcul qu'on envoie aux futurs √©l√®ves, mais je ne pense pas que ce soit un format tr√®s engageant et que les jeunes le fasse (alors que plusieurs m'ont dit que la partie calcul leur avait servi).
Le but est de diminuer, au moins un peu, la proportions d'√©l√®ves qui ne savent rien de rien sur python au d√©but de l'ann√©e.


jbb üêà‚Äç‚¨õ
4:50 PM
Pour les MP2I on leur conseille de faire un peu de france-ioi pendant l'√©t√©. Les premiers niveaux ne sont pas tr√®s int√©ressants (et ne peuvent √™tre saut√©s), mais c'est mieux que rien. 


matthieu_solnon
5:02 PM

Avec les coll√®gues de sup, on s'√©tait mis d'accord pour conseiller aux futurs sup de faire les 2-3 premiers niveaux de France IOI. 
Je n'ai pas suivi le dossier, je ne sais pas si cela a √©t√© suivi d'effets. 


jbb üêà‚Äç‚¨õ
5:06 PM
Chez nous c'est dans le message envoy√© par Parcoursup quand ils acceptent d√©finitivement, avec ¬´ lire les livres au programme de Fran√ßais ¬ª.

Syst√®me
11:20 PM
@Asli Grimaud a rejoint le canal.
Aujourd'hui

Pierre Karpman
10:51 AM
Hello,
Puisqu'on parle de DFS, j'ai relu les messages du 15 juin sur l'impl√©mentation it√©rative avec pile et les d√©fauts / dangers associ√©s.
Pour ce qui est de la consommation m√©moire suppl√©mentaire de dfs2, il y a une solution simple qui consiste √† utiliser une structure un peu plus riche qu'une pile, permettant la suppression (en ‚âà O(1)) d'un √©l√©ment connu : avant d'empiler un sommet, il suffit de v√©rifier s'il est d√©j√† pr√©sent plus bas dans la pile, et si oui on le supprime (car il aura d√©j√† √©t√© visit√© quand on le d√©pilera). √áa s'impl√©menterait bien avec une liste doublement cha√Æn√©e, mais en python on n'a pas vraiment √ßa (en tout cas, les deques ne permettent pas la suppression rapide hors t√™te/queue). Par contre, les dictionnaires impl√©mentent une structure de pile, gr√¢ce √† popitem qui est garantie (depuis la version 3.7) de renvoyer le dernier √©l√©ment ins√©r√©.

Bref, du coup √ßa donne √ßa (en modifiant a minima le dfs2 de https://11011110.github.io/blog/2013/12/17/stack-based-graph-traversal.html  d√©j√† cit√©) :

def dfs2lite(G, s):
    visited = set()
    rastack = {s: True}
    while rastack:
        v, _ = rastack.popitem()
        if v not in visited:
            visited.add(v)
            for w in G[v]:
                if w not in visited:
                    if w in rastack:
                        del rastack[w]
                    rastack[w] = True
    return visited
Les dictionnaires √©tant au programme (et le choix ¬´√©clair√©¬ª entre liste et dictionnaire aussi  :sweat_smile: ), √ßa me semble pas compl√®tement d√©connant de traiter √ßa en cours, non ?


g_dewaele
11:17 AM
Je ne peux personnellement m'emp√™cher de trouver √ßa un peu compliqu√© pour des √©l√®ves, d'autant que √ßa suppose que ce soit une version r√©cente de Python, pour pouvoir avoir la condition sur l'ordre des cl√©s afin de garantir que le popitem donne la bonne cl√©, et il faut encore expliquer pourquoi on supprime une cl√© pour la remettre toujours sur ce m√™me principe. Et il me semble que √ßa d√©borde pas mal du programme...


Pierre Karpman
11:35 AM
Oui, √ßa ferait un peu des choses √† expliquer (pour la suppression/r√©insertion, la doc est au moins bien claire sur le sujet : ‚ÄúDictionaries preserve insertion order. Note that updating a key does not affect the order. Keys added after deletion are inserted at the end.‚Äù, donc si on donne l'extrait correspondant ce n'est pas bien m√©chant), et je n'ai aucune exp√©rience d'enseignement en pr√©pa, donc je te crois si tu penses que c'est un peu compliqu√©. Mais par contre je ne vois pas pourquoi tu trouves que √ßa d√©borde pas mal du programme (vraie question) ?


g_dewaele
1:14 PM
Je ne suis pas convaincu que savoir que les dictionnaires pr√©servent l'ordre des cl√©s (officiellement seulement depuis Python 3.7, m√™me si c'est apparu en 3.6) soit un attendu du programme. popitem en particulier (qui permet d'utiliser un dictionnaire comme une pile) me semble un peu loin. En fait, si un √©l√®ve √©crit quelque chose du genre en concours, je ne suis pas convaincu que √ßa se passerait bien, je ne suis pas persuad√© que les correcteurs soient au fait de popitem et encore moins du caract√®re ordonn√© des dictionnaires alors que pendant des ann√©es on a enseign√© l'inverse (quand on voit que des responsables de la partie info de concours soutenaient encore que range construisait une liste...).
Les set non plus ne sont techniquement pas au programme (mais √ßa peut ais√©ment √™tre remplac√© par un dictionnaire).
Disons que j'ai tellement √©t√© refroidi par les concours que je m'efforce de ne vraiment pas marcher sur la ligne...


Pierre Karpman
1:16 PM
D'accord, merci !
(Pour les set je suis d'accord ; j'en ai utilis√© un uniquement parce que c'est ce qu'il y avait dans le dfs2 du site mentionn√©, et je voulais le modifier le moins possible pour montrer que √ßa ne complexifiait pas trop la chose.) 


Pierre Karpman
1:21 PM
Pour les attendus du programme sur les dictionnaires je me suis pos√© la question et j'avais v√©rifi√© s'il y avait une liste exhaustive des fonctions/m√©thodes associ√©es √† conna√Ætre, mais √ßa ne me semble pas clair si les quelques exemples mentionn√©s dans l'annexe ont cette pr√©tention. Bref...


g_dewaele
1:29 PM
Oui, ce sont des questions fort d√©licates... Je pars du principe que si une m√©thode n'est pas noir sur blanc dans le programme il y a un vrai risque en concours (d√©j√† que ce qui est noir sur blanc joue de mauvais tours...). M√™me del, j'essaie de faire sans (mais l√†, pas facile de s'en passer... au moins OrderedDict a une m√©thode sp√©cifique pour remonter un √©l√©ment qui rend la chose plus lisible).
Note bien que ce n'est que mon ressenti, j'appr√©cierais que d'autres donnent le leur sur la question. Le code ne me choque pas dans l'absolu, c'est juste que dans le cadre des concours, je pr√©f√®re penser la pile Python infinie et proc√©der par r√©cursion pour un parcours en profondeur.


Axel Rogue
1:39 PM

√áa me semblait une suggestion assez raisonnable aussi.
Je vais conseiller de faire les niveaux 1 et 2, √ßa me para√Æt suffisant pour √™tre serein en sup.


arnaud
3:21 PM
def DFSCycle(G, s):
    n = len(G)
    pile = [s]
    marque = [ False for _ in range(n) ]
    parents = [ None for _ in range(n) ]
    while len(pile) != 0 :
        sommet = pile.pop()
        if not marque[sommet] :
            marque[sommet] = True
            for voisin in G[sommet] :
                if parents[voisin] != None and not marque[voisin]:
                    Cycle = str(sommet)+'-'+str(voisin) +'-'+str(parents[voisin])
                    # on remonte le chemin √† l'envers jusqu'√† retomber sur parents[voisin]
                    while sommet != parents[voisin] :
                        sommet = parents[sommet]
                        Cycle = str(sommet)+'-'+ Cycle
                    return Cycle
                else : 
                    pile.append(voisin)
                    if not marque[voisin] :
                        parents[voisin] = sommet
    return False

def BFSCycle(G, s):
    n = len(G)
    file = collections.deque([])
    file.append(s)
    marque = [ False for _ in range(n) ]
    parents = [ None for _ in range(n) ]
    while len(file) != 0 :
        sommet = file.popleft()
        if not marque[sommet] :
            marque[sommet] = True
            for voisin in G[sommet] :
                if parents[voisin] != None and not marque[voisin]:
                    Cycle = str(sommet) + '-' + str(voisin) + '-' + str(parents[voisin])
                    voisin = parents[voisin]
                    i = 0 # gestion du choix du chemin
                    # on remonte les deux chemins √† l'envers
                    while sommet != voisin :
                        if i == 0 : # chemin menant √† sommet
                            sommet = parents[sommet]
                            Cycle = str(sommet) + '-' + Cycle
                        else :
                            voisin = parents[voisin]
                            Cycle = Cycle + '-' + str(voisin)
                        i = (i + 1) % 2
                    return Cycle
                else : 
                    file.append(voisin)
                    if not marque[voisin] :
                        parents[voisin] = sommet
    return False
Afficher plus
Bonjour voil√† ce que j'ai √©cris pour les graphes non orient√©s. Pour le BFS j'ai reconstruit le cycle en revenant en arri√®re des deux c√¥t√©s en m√™me temps, jusqu'√† arriver √† un sommet commun. 

Je ne sais pas si c'est la bonne m√©thode ?


arnaud
4:19 PM

J'ai du mal √† comprendre ce que fait la fonction DFS. Si marque[s]=1 elle renvoie False mais pourquoi ? La boucle for de la ligne 12 c'est pour les graphes non connexes ?


Nathaniel Carr√©
4:20 PM
la fonction DFS essaie de lancer un DFS depuis le sommet s ; si elle d√©tecte un cycle, elle renvoie False, sinon elle renvoie True

effectivement, la boucle qui suit est pour √™tre s√ªr de lancer un parcours sur chaque composante

4:22 PM
si marque[s] vaut 1, √ßa veut dire que pendant qu'on a lanc√© les appels r√©cursifs sur un voisin de s, et avant qu'on les ait tous termin√©s, on a atteint s √† nouveau, ce qui implique l'existence d'un cycle


np
4:22 PM
C'est du code astucieux que je d√©conseille de montrer √† des √©l√®ves de la plupart des lyc√©es :slightly_smiling_face:.


Nathaniel Carr√©
4:23 PM
quelle part tu consid√®res astucieuse ? tu fais comment pour la d√©tection de cycle orient√© de ton c√¥t√© ?


np
4:25 PM
if marque[s] == 0 and not DFS(s)

arnaud
4:25 PM
√ßa ressemble √† ce qui est expliqu√© l√†:
https://info.blaisepascal.fr/nsi-parcours-dun-graphe/ 


np
4:25 PM
return marque[s] == 2
4:26 PM
Je dis juste que tu utilises des petites astuces de programmation. Pour le fond je fais pareil que toi.

4:27 PM
Alors qu'il vaudrait mieux √©crire :

if marque[s] == 2:
    return True
else if marque[s] != 2:
    return False

arnaud
4:27 PM
je ne suis pas s√ªr que ce soit plus lisible pour les √©tudiants.


Nathaniel Carr√©
4:30 PM

je reviens sur ce code : j'ai comme un doute sur le test s == p

4:31 PM
il faudrait soit faire un test dans la boucle for du DFS, soit, comme tu le disais, utiliser un tableau de parents


np
4:34 PM
J'ai comme l'impression que quelqu'un a essay√© d'adapter un code trop astucieux pour lui et s'est plant√©.


matthieu_solnon
5:43 PM

Oui, de m√©moire on s'√©tait dit que l'on serait tr√®s contents s'ils ma√Ætrisaient le niveau 2 √† l'entr√©e en PTSI et le niveau 3 √† l'entr√©e en PT. 


g_dewaele
6:33 PM







Petite question : quel int√©r√™t d'utiliser une vraie file (deque) pour le BFS ? Je veux dire, plut√¥t que :

def bfs(G, s):
    parents = {s: None}
    file = [s]
    idx = 0
    
    while idx < len(file):
        v = file[idx]
        for w in G[v]:
            if w not in parents:
                parents[w] = v
                file.append(w)
        idx += 1
    
    return parents